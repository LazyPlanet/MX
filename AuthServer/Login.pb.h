// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Login.proto

#ifndef PROTOBUF_Login_2eproto__INCLUDED
#define PROTOBUF_Login_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace Auth {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Login_2eproto();
void protobuf_AssignDesc_Login_2eproto();
void protobuf_ShutdownFile_Login_2eproto();

class Meta;
class Account;
class Login;
class LoginTicket;
class ServerList;
class ServerList_Server;

enum LoginTicket_AuthenticationState {
  LoginTicket_AuthenticationState_LOGIN = 1,
  LoginTicket_AuthenticationState_UNLAWFUL = 2,
  LoginTicket_AuthenticationState_DONE = 3
};
bool LoginTicket_AuthenticationState_IsValid(int value);
const LoginTicket_AuthenticationState LoginTicket_AuthenticationState_AuthenticationState_MIN = LoginTicket_AuthenticationState_LOGIN;
const LoginTicket_AuthenticationState LoginTicket_AuthenticationState_AuthenticationState_MAX = LoginTicket_AuthenticationState_DONE;
const int LoginTicket_AuthenticationState_AuthenticationState_ARRAYSIZE = LoginTicket_AuthenticationState_AuthenticationState_MAX + 1;

const ::google::protobuf::EnumDescriptor* LoginTicket_AuthenticationState_descriptor();
inline const ::std::string& LoginTicket_AuthenticationState_Name(LoginTicket_AuthenticationState value) {
  return ::google::protobuf::internal::NameOfEnum(
    LoginTicket_AuthenticationState_descriptor(), value);
}
inline bool LoginTicket_AuthenticationState_Parse(
    const ::std::string& name, LoginTicket_AuthenticationState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LoginTicket_AuthenticationState>(
    LoginTicket_AuthenticationState_descriptor(), name, value);
}
enum ServerList_ServerState {
  ServerList_ServerState_NORMAL = 1,
  ServerList_ServerState_HOT = 2
};
bool ServerList_ServerState_IsValid(int value);
const ServerList_ServerState ServerList_ServerState_ServerState_MIN = ServerList_ServerState_NORMAL;
const ServerList_ServerState ServerList_ServerState_ServerState_MAX = ServerList_ServerState_HOT;
const int ServerList_ServerState_ServerState_ARRAYSIZE = ServerList_ServerState_ServerState_MAX + 1;

const ::google::protobuf::EnumDescriptor* ServerList_ServerState_descriptor();
inline const ::std::string& ServerList_ServerState_Name(ServerList_ServerState value) {
  return ::google::protobuf::internal::NameOfEnum(
    ServerList_ServerState_descriptor(), value);
}
inline bool ServerList_ServerState_Parse(
    const ::std::string& name, ServerList_ServerState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ServerList_ServerState>(
    ServerList_ServerState_descriptor(), name, value);
}
enum MetaType {
  META_TYPE_C2S_LOGIN = 1,
  META_TYPE_S2C_TICKET = 2,
  META_TYPE_S2C_SERVER_LIST = 3
};
bool MetaType_IsValid(int value);
const MetaType MetaType_MIN = META_TYPE_C2S_LOGIN;
const MetaType MetaType_MAX = META_TYPE_S2C_SERVER_LIST;
const int MetaType_ARRAYSIZE = MetaType_MAX + 1;

const ::google::protobuf::EnumDescriptor* MetaType_descriptor();
inline const ::std::string& MetaType_Name(MetaType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MetaType_descriptor(), value);
}
inline bool MetaType_Parse(
    const ::std::string& name, MetaType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MetaType>(
    MetaType_descriptor(), name, value);
}
// ===================================================================

class Meta : public ::google::protobuf::Message {
 public:
  Meta();
  virtual ~Meta();

  Meta(const Meta& from);

  inline Meta& operator=(const Meta& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Meta& default_instance();

  void Swap(Meta* other);

  // implements Message ----------------------------------------------

  Meta* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Meta& from);
  void MergeFrom(const Meta& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Auth.MetaType type_t = 1;
  inline bool has_type_t() const;
  inline void clear_type_t();
  static const int kTypeTFieldNumber = 1;
  inline ::Auth::MetaType type_t() const;
  inline void set_type_t(::Auth::MetaType value);

  // optional bytes stuff = 2;
  inline bool has_stuff() const;
  inline void clear_stuff();
  static const int kStuffFieldNumber = 2;
  inline const ::std::string& stuff() const;
  inline void set_stuff(const ::std::string& value);
  inline void set_stuff(const char* value);
  inline void set_stuff(const void* value, size_t size);
  inline ::std::string* mutable_stuff();
  inline ::std::string* release_stuff();
  inline void set_allocated_stuff(::std::string* stuff);

  // @@protoc_insertion_point(class_scope:Auth.Meta)
 private:
  inline void set_has_type_t();
  inline void clear_has_type_t();
  inline void set_has_stuff();
  inline void clear_has_stuff();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* stuff_;
  int type_t_;
  friend void  protobuf_AddDesc_Login_2eproto();
  friend void protobuf_AssignDesc_Login_2eproto();
  friend void protobuf_ShutdownFile_Login_2eproto();

  void InitAsDefaultInstance();
  static Meta* default_instance_;
};
// -------------------------------------------------------------------

class Account : public ::google::protobuf::Message {
 public:
  Account();
  virtual ~Account();

  Account(const Account& from);

  inline Account& operator=(const Account& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Account& default_instance();

  void Swap(Account* other);

  // implements Message ----------------------------------------------

  Account* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Account& from);
  void MergeFrom(const Account& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes username = 1;
  inline bool has_username() const;
  inline void clear_username();
  static const int kUsernameFieldNumber = 1;
  inline const ::std::string& username() const;
  inline void set_username(const ::std::string& value);
  inline void set_username(const char* value);
  inline void set_username(const void* value, size_t size);
  inline ::std::string* mutable_username();
  inline ::std::string* release_username();
  inline void set_allocated_username(::std::string* username);

  // optional bytes password = 2;
  inline bool has_password() const;
  inline void clear_password();
  static const int kPasswordFieldNumber = 2;
  inline const ::std::string& password() const;
  inline void set_password(const ::std::string& value);
  inline void set_password(const char* value);
  inline void set_password(const void* value, size_t size);
  inline ::std::string* mutable_password();
  inline ::std::string* release_password();
  inline void set_allocated_password(::std::string* password);

  // optional int32 expiry_time = 3;
  inline bool has_expiry_time() const;
  inline void clear_expiry_time();
  static const int kExpiryTimeFieldNumber = 3;
  inline ::google::protobuf::int32 expiry_time() const;
  inline void set_expiry_time(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Auth.Account)
 private:
  inline void set_has_username();
  inline void clear_has_username();
  inline void set_has_password();
  inline void clear_has_password();
  inline void set_has_expiry_time();
  inline void clear_has_expiry_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* username_;
  ::std::string* password_;
  ::google::protobuf::int32 expiry_time_;
  friend void  protobuf_AddDesc_Login_2eproto();
  friend void protobuf_AssignDesc_Login_2eproto();
  friend void protobuf_ShutdownFile_Login_2eproto();

  void InitAsDefaultInstance();
  static Account* default_instance_;
};
// -------------------------------------------------------------------

class Login : public ::google::protobuf::Message {
 public:
  Login();
  virtual ~Login();

  Login(const Login& from);

  inline Login& operator=(const Login& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Login& default_instance();

  void Swap(Login* other);

  // implements Message ----------------------------------------------

  Login* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Login& from);
  void MergeFrom(const Login& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Auth.MetaType type_t = 1 [default = META_TYPE_C2S_LOGIN];
  inline bool has_type_t() const;
  inline void clear_type_t();
  static const int kTypeTFieldNumber = 1;
  inline ::Auth::MetaType type_t() const;
  inline void set_type_t(::Auth::MetaType value);

  // optional .Auth.Account account = 2;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 2;
  inline const ::Auth::Account& account() const;
  inline ::Auth::Account* mutable_account();
  inline ::Auth::Account* release_account();
  inline void set_allocated_account(::Auth::Account* account);

  // @@protoc_insertion_point(class_scope:Auth.Login)
 private:
  inline void set_has_type_t();
  inline void clear_has_type_t();
  inline void set_has_account();
  inline void clear_has_account();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::Auth::Account* account_;
  int type_t_;
  friend void  protobuf_AddDesc_Login_2eproto();
  friend void protobuf_AssignDesc_Login_2eproto();
  friend void protobuf_ShutdownFile_Login_2eproto();

  void InitAsDefaultInstance();
  static Login* default_instance_;
};
// -------------------------------------------------------------------

class LoginTicket : public ::google::protobuf::Message {
 public:
  LoginTicket();
  virtual ~LoginTicket();

  LoginTicket(const LoginTicket& from);

  inline LoginTicket& operator=(const LoginTicket& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginTicket& default_instance();

  void Swap(LoginTicket* other);

  // implements Message ----------------------------------------------

  LoginTicket* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LoginTicket& from);
  void MergeFrom(const LoginTicket& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef LoginTicket_AuthenticationState AuthenticationState;
  static const AuthenticationState LOGIN = LoginTicket_AuthenticationState_LOGIN;
  static const AuthenticationState UNLAWFUL = LoginTicket_AuthenticationState_UNLAWFUL;
  static const AuthenticationState DONE = LoginTicket_AuthenticationState_DONE;
  static inline bool AuthenticationState_IsValid(int value) {
    return LoginTicket_AuthenticationState_IsValid(value);
  }
  static const AuthenticationState AuthenticationState_MIN =
    LoginTicket_AuthenticationState_AuthenticationState_MIN;
  static const AuthenticationState AuthenticationState_MAX =
    LoginTicket_AuthenticationState_AuthenticationState_MAX;
  static const int AuthenticationState_ARRAYSIZE =
    LoginTicket_AuthenticationState_AuthenticationState_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  AuthenticationState_descriptor() {
    return LoginTicket_AuthenticationState_descriptor();
  }
  static inline const ::std::string& AuthenticationState_Name(AuthenticationState value) {
    return LoginTicket_AuthenticationState_Name(value);
  }
  static inline bool AuthenticationState_Parse(const ::std::string& name,
      AuthenticationState* value) {
    return LoginTicket_AuthenticationState_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .Auth.MetaType type_t = 1 [default = META_TYPE_S2C_TICKET];
  inline bool has_type_t() const;
  inline void clear_type_t();
  static const int kTypeTFieldNumber = 1;
  inline ::Auth::MetaType type_t() const;
  inline void set_type_t(::Auth::MetaType value);

  // optional .Auth.LoginTicket.AuthenticationState authentication_state = 2;
  inline bool has_authentication_state() const;
  inline void clear_authentication_state();
  static const int kAuthenticationStateFieldNumber = 2;
  inline ::Auth::LoginTicket_AuthenticationState authentication_state() const;
  inline void set_authentication_state(::Auth::LoginTicket_AuthenticationState value);

  // optional string ticket = 3;
  inline bool has_ticket() const;
  inline void clear_ticket();
  static const int kTicketFieldNumber = 3;
  inline const ::std::string& ticket() const;
  inline void set_ticket(const ::std::string& value);
  inline void set_ticket(const char* value);
  inline void set_ticket(const char* value, size_t size);
  inline ::std::string* mutable_ticket();
  inline ::std::string* release_ticket();
  inline void set_allocated_ticket(::std::string* ticket);

  // @@protoc_insertion_point(class_scope:Auth.LoginTicket)
 private:
  inline void set_has_type_t();
  inline void clear_has_type_t();
  inline void set_has_authentication_state();
  inline void clear_has_authentication_state();
  inline void set_has_ticket();
  inline void clear_has_ticket();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int type_t_;
  int authentication_state_;
  ::std::string* ticket_;
  friend void  protobuf_AddDesc_Login_2eproto();
  friend void protobuf_AssignDesc_Login_2eproto();
  friend void protobuf_ShutdownFile_Login_2eproto();

  void InitAsDefaultInstance();
  static LoginTicket* default_instance_;
};
// -------------------------------------------------------------------

class ServerList_Server : public ::google::protobuf::Message {
 public:
  ServerList_Server();
  virtual ~ServerList_Server();

  ServerList_Server(const ServerList_Server& from);

  inline ServerList_Server& operator=(const ServerList_Server& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerList_Server& default_instance();

  void Swap(ServerList_Server* other);

  // implements Message ----------------------------------------------

  ServerList_Server* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ServerList_Server& from);
  void MergeFrom(const ServerList_Server& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string ip_address = 1;
  inline bool has_ip_address() const;
  inline void clear_ip_address();
  static const int kIpAddressFieldNumber = 1;
  inline const ::std::string& ip_address() const;
  inline void set_ip_address(const ::std::string& value);
  inline void set_ip_address(const char* value);
  inline void set_ip_address(const char* value, size_t size);
  inline ::std::string* mutable_ip_address();
  inline ::std::string* release_ip_address();
  inline void set_allocated_ip_address(::std::string* ip_address);

  // optional int32 port = 2;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 2;
  inline ::google::protobuf::int32 port() const;
  inline void set_port(::google::protobuf::int32 value);

  // optional int32 zone = 3;
  inline bool has_zone() const;
  inline void clear_zone();
  static const int kZoneFieldNumber = 3;
  inline ::google::protobuf::int32 zone() const;
  inline void set_zone(::google::protobuf::int32 value);

  // optional .Auth.ServerList.ServerState state = 4;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 4;
  inline ::Auth::ServerList_ServerState state() const;
  inline void set_state(::Auth::ServerList_ServerState value);

  // @@protoc_insertion_point(class_scope:Auth.ServerList.Server)
 private:
  inline void set_has_ip_address();
  inline void clear_has_ip_address();
  inline void set_has_port();
  inline void clear_has_port();
  inline void set_has_zone();
  inline void clear_has_zone();
  inline void set_has_state();
  inline void clear_has_state();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* ip_address_;
  ::google::protobuf::int32 port_;
  ::google::protobuf::int32 zone_;
  int state_;
  friend void  protobuf_AddDesc_Login_2eproto();
  friend void protobuf_AssignDesc_Login_2eproto();
  friend void protobuf_ShutdownFile_Login_2eproto();

  void InitAsDefaultInstance();
  static ServerList_Server* default_instance_;
};
// -------------------------------------------------------------------

class ServerList : public ::google::protobuf::Message {
 public:
  ServerList();
  virtual ~ServerList();

  ServerList(const ServerList& from);

  inline ServerList& operator=(const ServerList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerList& default_instance();

  void Swap(ServerList* other);

  // implements Message ----------------------------------------------

  ServerList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ServerList& from);
  void MergeFrom(const ServerList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ServerList_Server Server;

  typedef ServerList_ServerState ServerState;
  static const ServerState NORMAL = ServerList_ServerState_NORMAL;
  static const ServerState HOT = ServerList_ServerState_HOT;
  static inline bool ServerState_IsValid(int value) {
    return ServerList_ServerState_IsValid(value);
  }
  static const ServerState ServerState_MIN =
    ServerList_ServerState_ServerState_MIN;
  static const ServerState ServerState_MAX =
    ServerList_ServerState_ServerState_MAX;
  static const int ServerState_ARRAYSIZE =
    ServerList_ServerState_ServerState_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ServerState_descriptor() {
    return ServerList_ServerState_descriptor();
  }
  static inline const ::std::string& ServerState_Name(ServerState value) {
    return ServerList_ServerState_Name(value);
  }
  static inline bool ServerState_Parse(const ::std::string& name,
      ServerState* value) {
    return ServerList_ServerState_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .Auth.MetaType type_t = 1 [default = META_TYPE_S2C_SERVER_LIST];
  inline bool has_type_t() const;
  inline void clear_type_t();
  static const int kTypeTFieldNumber = 1;
  inline ::Auth::MetaType type_t() const;
  inline void set_type_t(::Auth::MetaType value);

  // repeated .Auth.ServerList.Server list = 2;
  inline int list_size() const;
  inline void clear_list();
  static const int kListFieldNumber = 2;
  inline const ::Auth::ServerList_Server& list(int index) const;
  inline ::Auth::ServerList_Server* mutable_list(int index);
  inline ::Auth::ServerList_Server* add_list();
  inline const ::google::protobuf::RepeatedPtrField< ::Auth::ServerList_Server >&
      list() const;
  inline ::google::protobuf::RepeatedPtrField< ::Auth::ServerList_Server >*
      mutable_list();

  // @@protoc_insertion_point(class_scope:Auth.ServerList)
 private:
  inline void set_has_type_t();
  inline void clear_has_type_t();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Auth::ServerList_Server > list_;
  int type_t_;
  friend void  protobuf_AddDesc_Login_2eproto();
  friend void protobuf_AssignDesc_Login_2eproto();
  friend void protobuf_ShutdownFile_Login_2eproto();

  void InitAsDefaultInstance();
  static ServerList* default_instance_;
};
// ===================================================================


// ===================================================================

// Meta

// optional .Auth.MetaType type_t = 1;
inline bool Meta::has_type_t() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Meta::set_has_type_t() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Meta::clear_has_type_t() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Meta::clear_type_t() {
  type_t_ = 1;
  clear_has_type_t();
}
inline ::Auth::MetaType Meta::type_t() const {
  // @@protoc_insertion_point(field_get:Auth.Meta.type_t)
  return static_cast< ::Auth::MetaType >(type_t_);
}
inline void Meta::set_type_t(::Auth::MetaType value) {
  assert(::Auth::MetaType_IsValid(value));
  set_has_type_t();
  type_t_ = value;
  // @@protoc_insertion_point(field_set:Auth.Meta.type_t)
}

// optional bytes stuff = 2;
inline bool Meta::has_stuff() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Meta::set_has_stuff() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Meta::clear_has_stuff() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Meta::clear_stuff() {
  if (stuff_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    stuff_->clear();
  }
  clear_has_stuff();
}
inline const ::std::string& Meta::stuff() const {
  // @@protoc_insertion_point(field_get:Auth.Meta.stuff)
  return *stuff_;
}
inline void Meta::set_stuff(const ::std::string& value) {
  set_has_stuff();
  if (stuff_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    stuff_ = new ::std::string;
  }
  stuff_->assign(value);
  // @@protoc_insertion_point(field_set:Auth.Meta.stuff)
}
inline void Meta::set_stuff(const char* value) {
  set_has_stuff();
  if (stuff_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    stuff_ = new ::std::string;
  }
  stuff_->assign(value);
  // @@protoc_insertion_point(field_set_char:Auth.Meta.stuff)
}
inline void Meta::set_stuff(const void* value, size_t size) {
  set_has_stuff();
  if (stuff_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    stuff_ = new ::std::string;
  }
  stuff_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Auth.Meta.stuff)
}
inline ::std::string* Meta::mutable_stuff() {
  set_has_stuff();
  if (stuff_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    stuff_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Auth.Meta.stuff)
  return stuff_;
}
inline ::std::string* Meta::release_stuff() {
  clear_has_stuff();
  if (stuff_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = stuff_;
    stuff_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Meta::set_allocated_stuff(::std::string* stuff) {
  if (stuff_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete stuff_;
  }
  if (stuff) {
    set_has_stuff();
    stuff_ = stuff;
  } else {
    clear_has_stuff();
    stuff_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Auth.Meta.stuff)
}

// -------------------------------------------------------------------

// Account

// optional bytes username = 1;
inline bool Account::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Account::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Account::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Account::clear_username() {
  if (username_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    username_->clear();
  }
  clear_has_username();
}
inline const ::std::string& Account::username() const {
  // @@protoc_insertion_point(field_get:Auth.Account.username)
  return *username_;
}
inline void Account::set_username(const ::std::string& value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    username_ = new ::std::string;
  }
  username_->assign(value);
  // @@protoc_insertion_point(field_set:Auth.Account.username)
}
inline void Account::set_username(const char* value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    username_ = new ::std::string;
  }
  username_->assign(value);
  // @@protoc_insertion_point(field_set_char:Auth.Account.username)
}
inline void Account::set_username(const void* value, size_t size) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    username_ = new ::std::string;
  }
  username_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Auth.Account.username)
}
inline ::std::string* Account::mutable_username() {
  set_has_username();
  if (username_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    username_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Auth.Account.username)
  return username_;
}
inline ::std::string* Account::release_username() {
  clear_has_username();
  if (username_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = username_;
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Account::set_allocated_username(::std::string* username) {
  if (username_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete username_;
  }
  if (username) {
    set_has_username();
    username_ = username;
  } else {
    clear_has_username();
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Auth.Account.username)
}

// optional bytes password = 2;
inline bool Account::has_password() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Account::set_has_password() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Account::clear_has_password() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Account::clear_password() {
  if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_->clear();
  }
  clear_has_password();
}
inline const ::std::string& Account::password() const {
  // @@protoc_insertion_point(field_get:Auth.Account.password)
  return *password_;
}
inline void Account::set_password(const ::std::string& value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_ = new ::std::string;
  }
  password_->assign(value);
  // @@protoc_insertion_point(field_set:Auth.Account.password)
}
inline void Account::set_password(const char* value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_ = new ::std::string;
  }
  password_->assign(value);
  // @@protoc_insertion_point(field_set_char:Auth.Account.password)
}
inline void Account::set_password(const void* value, size_t size) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_ = new ::std::string;
  }
  password_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Auth.Account.password)
}
inline ::std::string* Account::mutable_password() {
  set_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Auth.Account.password)
  return password_;
}
inline ::std::string* Account::release_password() {
  clear_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = password_;
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Account::set_allocated_password(::std::string* password) {
  if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete password_;
  }
  if (password) {
    set_has_password();
    password_ = password;
  } else {
    clear_has_password();
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Auth.Account.password)
}

// optional int32 expiry_time = 3;
inline bool Account::has_expiry_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Account::set_has_expiry_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Account::clear_has_expiry_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Account::clear_expiry_time() {
  expiry_time_ = 0;
  clear_has_expiry_time();
}
inline ::google::protobuf::int32 Account::expiry_time() const {
  // @@protoc_insertion_point(field_get:Auth.Account.expiry_time)
  return expiry_time_;
}
inline void Account::set_expiry_time(::google::protobuf::int32 value) {
  set_has_expiry_time();
  expiry_time_ = value;
  // @@protoc_insertion_point(field_set:Auth.Account.expiry_time)
}

// -------------------------------------------------------------------

// Login

// optional .Auth.MetaType type_t = 1 [default = META_TYPE_C2S_LOGIN];
inline bool Login::has_type_t() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Login::set_has_type_t() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Login::clear_has_type_t() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Login::clear_type_t() {
  type_t_ = 1;
  clear_has_type_t();
}
inline ::Auth::MetaType Login::type_t() const {
  // @@protoc_insertion_point(field_get:Auth.Login.type_t)
  return static_cast< ::Auth::MetaType >(type_t_);
}
inline void Login::set_type_t(::Auth::MetaType value) {
  assert(::Auth::MetaType_IsValid(value));
  set_has_type_t();
  type_t_ = value;
  // @@protoc_insertion_point(field_set:Auth.Login.type_t)
}

// optional .Auth.Account account = 2;
inline bool Login::has_account() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Login::set_has_account() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Login::clear_has_account() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Login::clear_account() {
  if (account_ != NULL) account_->::Auth::Account::Clear();
  clear_has_account();
}
inline const ::Auth::Account& Login::account() const {
  // @@protoc_insertion_point(field_get:Auth.Login.account)
  return account_ != NULL ? *account_ : *default_instance_->account_;
}
inline ::Auth::Account* Login::mutable_account() {
  set_has_account();
  if (account_ == NULL) account_ = new ::Auth::Account;
  // @@protoc_insertion_point(field_mutable:Auth.Login.account)
  return account_;
}
inline ::Auth::Account* Login::release_account() {
  clear_has_account();
  ::Auth::Account* temp = account_;
  account_ = NULL;
  return temp;
}
inline void Login::set_allocated_account(::Auth::Account* account) {
  delete account_;
  account_ = account;
  if (account) {
    set_has_account();
  } else {
    clear_has_account();
  }
  // @@protoc_insertion_point(field_set_allocated:Auth.Login.account)
}

// -------------------------------------------------------------------

// LoginTicket

// optional .Auth.MetaType type_t = 1 [default = META_TYPE_S2C_TICKET];
inline bool LoginTicket::has_type_t() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LoginTicket::set_has_type_t() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LoginTicket::clear_has_type_t() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LoginTicket::clear_type_t() {
  type_t_ = 2;
  clear_has_type_t();
}
inline ::Auth::MetaType LoginTicket::type_t() const {
  // @@protoc_insertion_point(field_get:Auth.LoginTicket.type_t)
  return static_cast< ::Auth::MetaType >(type_t_);
}
inline void LoginTicket::set_type_t(::Auth::MetaType value) {
  assert(::Auth::MetaType_IsValid(value));
  set_has_type_t();
  type_t_ = value;
  // @@protoc_insertion_point(field_set:Auth.LoginTicket.type_t)
}

// optional .Auth.LoginTicket.AuthenticationState authentication_state = 2;
inline bool LoginTicket::has_authentication_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LoginTicket::set_has_authentication_state() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LoginTicket::clear_has_authentication_state() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LoginTicket::clear_authentication_state() {
  authentication_state_ = 1;
  clear_has_authentication_state();
}
inline ::Auth::LoginTicket_AuthenticationState LoginTicket::authentication_state() const {
  // @@protoc_insertion_point(field_get:Auth.LoginTicket.authentication_state)
  return static_cast< ::Auth::LoginTicket_AuthenticationState >(authentication_state_);
}
inline void LoginTicket::set_authentication_state(::Auth::LoginTicket_AuthenticationState value) {
  assert(::Auth::LoginTicket_AuthenticationState_IsValid(value));
  set_has_authentication_state();
  authentication_state_ = value;
  // @@protoc_insertion_point(field_set:Auth.LoginTicket.authentication_state)
}

// optional string ticket = 3;
inline bool LoginTicket::has_ticket() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LoginTicket::set_has_ticket() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LoginTicket::clear_has_ticket() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LoginTicket::clear_ticket() {
  if (ticket_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ticket_->clear();
  }
  clear_has_ticket();
}
inline const ::std::string& LoginTicket::ticket() const {
  // @@protoc_insertion_point(field_get:Auth.LoginTicket.ticket)
  return *ticket_;
}
inline void LoginTicket::set_ticket(const ::std::string& value) {
  set_has_ticket();
  if (ticket_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ticket_ = new ::std::string;
  }
  ticket_->assign(value);
  // @@protoc_insertion_point(field_set:Auth.LoginTicket.ticket)
}
inline void LoginTicket::set_ticket(const char* value) {
  set_has_ticket();
  if (ticket_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ticket_ = new ::std::string;
  }
  ticket_->assign(value);
  // @@protoc_insertion_point(field_set_char:Auth.LoginTicket.ticket)
}
inline void LoginTicket::set_ticket(const char* value, size_t size) {
  set_has_ticket();
  if (ticket_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ticket_ = new ::std::string;
  }
  ticket_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Auth.LoginTicket.ticket)
}
inline ::std::string* LoginTicket::mutable_ticket() {
  set_has_ticket();
  if (ticket_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ticket_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Auth.LoginTicket.ticket)
  return ticket_;
}
inline ::std::string* LoginTicket::release_ticket() {
  clear_has_ticket();
  if (ticket_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ticket_;
    ticket_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LoginTicket::set_allocated_ticket(::std::string* ticket) {
  if (ticket_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ticket_;
  }
  if (ticket) {
    set_has_ticket();
    ticket_ = ticket;
  } else {
    clear_has_ticket();
    ticket_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Auth.LoginTicket.ticket)
}

// -------------------------------------------------------------------

// ServerList_Server

// optional string ip_address = 1;
inline bool ServerList_Server::has_ip_address() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ServerList_Server::set_has_ip_address() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ServerList_Server::clear_has_ip_address() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ServerList_Server::clear_ip_address() {
  if (ip_address_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_address_->clear();
  }
  clear_has_ip_address();
}
inline const ::std::string& ServerList_Server::ip_address() const {
  // @@protoc_insertion_point(field_get:Auth.ServerList.Server.ip_address)
  return *ip_address_;
}
inline void ServerList_Server::set_ip_address(const ::std::string& value) {
  set_has_ip_address();
  if (ip_address_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_address_ = new ::std::string;
  }
  ip_address_->assign(value);
  // @@protoc_insertion_point(field_set:Auth.ServerList.Server.ip_address)
}
inline void ServerList_Server::set_ip_address(const char* value) {
  set_has_ip_address();
  if (ip_address_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_address_ = new ::std::string;
  }
  ip_address_->assign(value);
  // @@protoc_insertion_point(field_set_char:Auth.ServerList.Server.ip_address)
}
inline void ServerList_Server::set_ip_address(const char* value, size_t size) {
  set_has_ip_address();
  if (ip_address_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_address_ = new ::std::string;
  }
  ip_address_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Auth.ServerList.Server.ip_address)
}
inline ::std::string* ServerList_Server::mutable_ip_address() {
  set_has_ip_address();
  if (ip_address_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_address_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Auth.ServerList.Server.ip_address)
  return ip_address_;
}
inline ::std::string* ServerList_Server::release_ip_address() {
  clear_has_ip_address();
  if (ip_address_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ip_address_;
    ip_address_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ServerList_Server::set_allocated_ip_address(::std::string* ip_address) {
  if (ip_address_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_address_;
  }
  if (ip_address) {
    set_has_ip_address();
    ip_address_ = ip_address;
  } else {
    clear_has_ip_address();
    ip_address_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Auth.ServerList.Server.ip_address)
}

// optional int32 port = 2;
inline bool ServerList_Server::has_port() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ServerList_Server::set_has_port() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ServerList_Server::clear_has_port() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ServerList_Server::clear_port() {
  port_ = 0;
  clear_has_port();
}
inline ::google::protobuf::int32 ServerList_Server::port() const {
  // @@protoc_insertion_point(field_get:Auth.ServerList.Server.port)
  return port_;
}
inline void ServerList_Server::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:Auth.ServerList.Server.port)
}

// optional int32 zone = 3;
inline bool ServerList_Server::has_zone() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ServerList_Server::set_has_zone() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ServerList_Server::clear_has_zone() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ServerList_Server::clear_zone() {
  zone_ = 0;
  clear_has_zone();
}
inline ::google::protobuf::int32 ServerList_Server::zone() const {
  // @@protoc_insertion_point(field_get:Auth.ServerList.Server.zone)
  return zone_;
}
inline void ServerList_Server::set_zone(::google::protobuf::int32 value) {
  set_has_zone();
  zone_ = value;
  // @@protoc_insertion_point(field_set:Auth.ServerList.Server.zone)
}

// optional .Auth.ServerList.ServerState state = 4;
inline bool ServerList_Server::has_state() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ServerList_Server::set_has_state() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ServerList_Server::clear_has_state() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ServerList_Server::clear_state() {
  state_ = 1;
  clear_has_state();
}
inline ::Auth::ServerList_ServerState ServerList_Server::state() const {
  // @@protoc_insertion_point(field_get:Auth.ServerList.Server.state)
  return static_cast< ::Auth::ServerList_ServerState >(state_);
}
inline void ServerList_Server::set_state(::Auth::ServerList_ServerState value) {
  assert(::Auth::ServerList_ServerState_IsValid(value));
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:Auth.ServerList.Server.state)
}

// -------------------------------------------------------------------

// ServerList

// optional .Auth.MetaType type_t = 1 [default = META_TYPE_S2C_SERVER_LIST];
inline bool ServerList::has_type_t() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ServerList::set_has_type_t() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ServerList::clear_has_type_t() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ServerList::clear_type_t() {
  type_t_ = 3;
  clear_has_type_t();
}
inline ::Auth::MetaType ServerList::type_t() const {
  // @@protoc_insertion_point(field_get:Auth.ServerList.type_t)
  return static_cast< ::Auth::MetaType >(type_t_);
}
inline void ServerList::set_type_t(::Auth::MetaType value) {
  assert(::Auth::MetaType_IsValid(value));
  set_has_type_t();
  type_t_ = value;
  // @@protoc_insertion_point(field_set:Auth.ServerList.type_t)
}

// repeated .Auth.ServerList.Server list = 2;
inline int ServerList::list_size() const {
  return list_.size();
}
inline void ServerList::clear_list() {
  list_.Clear();
}
inline const ::Auth::ServerList_Server& ServerList::list(int index) const {
  // @@protoc_insertion_point(field_get:Auth.ServerList.list)
  return list_.Get(index);
}
inline ::Auth::ServerList_Server* ServerList::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:Auth.ServerList.list)
  return list_.Mutable(index);
}
inline ::Auth::ServerList_Server* ServerList::add_list() {
  // @@protoc_insertion_point(field_add:Auth.ServerList.list)
  return list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Auth::ServerList_Server >&
ServerList::list() const {
  // @@protoc_insertion_point(field_list:Auth.ServerList.list)
  return list_;
}
inline ::google::protobuf::RepeatedPtrField< ::Auth::ServerList_Server >*
ServerList::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:Auth.ServerList.list)
  return &list_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Auth

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::Auth::LoginTicket_AuthenticationState> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Auth::LoginTicket_AuthenticationState>() {
  return ::Auth::LoginTicket_AuthenticationState_descriptor();
}
template <> struct is_proto_enum< ::Auth::ServerList_ServerState> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Auth::ServerList_ServerState>() {
  return ::Auth::ServerList_ServerState_descriptor();
}
template <> struct is_proto_enum< ::Auth::MetaType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Auth::MetaType>() {
  return ::Auth::MetaType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Login_2eproto__INCLUDED
